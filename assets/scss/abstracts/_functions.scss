// Convert color to RGB values
@function get-rgb($color) {
    @return (
        red: red($color),
        green: green($color),
        blue: blue($color)
    );
}

// Add this new power function
@function pow($number, $exponent) {
    $value: 1;

    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    }

    @return $value;
}

// Calculate relative luminance
@function get-luminance($color) {
    $rgb: get-rgb($color);

    $red: map-get($rgb, red) / 255;
    $green: map-get($rgb, green) / 255;
    $blue: map-get($rgb, blue) / 255;

    $red: if($red <= .03928, $red / 12.92, pow(($red + .055) / 1.055, 2.4));
    $green: if($green <= .03928, $green / 12.92, pow(($green + .055) / 1.055, 2.4));
    $blue: if($blue <= .03928, $blue / 12.92, pow(($blue + .055) / 1.055, 2.4));

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

// Calculate contrast ratio
@function get-contrast($color1, $color2) {
    $luminance1: get-luminance($color1) + .05;
    $luminance2: get-luminance($color2) + .05;

    @return if(
        $luminance1 > $luminance2,
        $luminance1 / $luminance2,
        $luminance2 / $luminance1
    );
}

// Test contrast and warn if below threshold
@mixin test-contrast($background, $foreground, $context: "general", $threshold: 4.5) {
    $contrast: get-contrast($background, $foreground);
    @if $contrast < $threshold {
        @warn "Accessibility Issue: Contrast ratio #{$contrast} is below #{$threshold} for #{$context}";
    }
}