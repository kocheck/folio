@use "sass:math";
@use "sass:color";

// Convert color to RGB values
@function get-rgb($color) {
    @return (
        red: color.red($color),
        green: color.green($color),
        blue: color.blue($color)
    );
}

// Calculate relative luminance
@function get-luminance($color) {
    $rgb: get-rgb($color);

    $red: math.div(map-get($rgb, red), 255);
    $green: math.div(map-get($rgb, green), 255);
    $blue: math.div(map-get($rgb, blue), 255);

    $red: if($red <= .03928, math.div($red, 12.92), math.pow(math.div($red + .055, 1.055), 2.4));
    $green: if($green <= .03928, math.div($green, 12.92), math.pow(math.div($green + .055, 1.055), 2.4));
    $blue: if($blue <= .03928, math.div($blue, 12.92), math.pow(math.div($blue + .055, 1.055), 2.4));

    @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

// Calculate contrast ratio
@function get-contrast($color1, $color2) {
    $luminance1: get-luminance($color1) + .05;
    $luminance2: get-luminance($color2) + .05;

    @return if(
        $luminance1 > $luminance2,
        math.div($luminance1, $luminance2),
        math.div($luminance2, $luminance1)
    );
}

// Test contrast and warn if below threshold
@mixin test-contrast($background, $foreground, $context: "general", $threshold: 4.5) {
    $contrast: get-contrast($background, $foreground);
    @if $contrast < $threshold {
        @warn "Accessibility Issue: Contrast ratio #{$contrast} is below #{$threshold} for #{$context}";
    }
}
